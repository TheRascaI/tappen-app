{"version":3,"sources":["cards/components/CardItem.js","cards/components/CardList.js","cards/pages/AllCards.js"],"names":["CardItem","props","auth","useContext","AuthContext","useState","showConfirmModal","setShowConfirmModal","useHttpClient","isLoading","error","sendRequest","clearError","cancelDeleteHandler","confirmDeleteHandler","a","process","id","Authorization","token","onDelete","Fragment","ErrorModal","onClear","LoadingSpinner","asOverlay","Modal","show","onCancel","header","footerClass","footer","Button","inverse","onClick","danger","className","Card","content","creatorName","to","src","flag","alt","width","CardList","items","length","map","data","timestamp","createdAt","slice","creatorId","creator","name","onDeleteCard","Game","loadedCards","setLoadedCards","useEffect","responseData","cards","fetchCards","console","log","deletedCardId","prevCards","filter","card"],"mappings":"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","file":"static/js/5.1903b8c3.chunk.js","sourcesContent":["import React,{useState, useContext} from 'react';\nimport Card from '../../shared/components/UIElements/Card';\nimport flag from '../../assets/svg/flag.svg';\nimport './CardItem.css';\nimport Button from '../../shared/components/FormElements/Button';\n\nimport Modal from '../../shared/components/UIElements/Modal';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { AuthContext } from '../../shared/context/auth-context';\n\nimport { useHttpClient } from '../../shared/hooks/http-hook';\n\n\nconst CardItem = (props) => {\n  const auth = useContext(AuthContext);\n    const [showConfirmModal, setShowConfirmModal] = useState(false);\n    const {isLoading, error, sendRequest, clearError} = useHttpClient();\n  \n    const showDeleteWarningHandler = () => {\n        setShowConfirmModal(true);\n      };\n    \n      const cancelDeleteHandler = () => {\n        setShowConfirmModal(false);\n      };\n    \n      const confirmDeleteHandler = async () => {\n        setShowConfirmModal(false);\n        try {\n          sendRequest(process.env.REACT_APP_BACKEND_URL + `/cards/${props.id}`, 'DELETE', null, {Authorization: 'Bearer ' + auth.token});\n          props.onDelete(props.id);\n        } catch (error) {\n          \n        }\n      };\n    \n\n    return(\n        <React.Fragment>\n    <ErrorModal error={error} onClear={clearError} />\n    {isLoading && <LoadingSpinner asOverlay/>}\n\n    <Modal\n        show={showConfirmModal}\n        onCancel={cancelDeleteHandler}\n        header=\"Are you sure?\"\n        footerClass=\"place-item__modal-actions\"\n        footer={\n          <React.Fragment>\n            <Button inverse onClick={cancelDeleteHandler}>\n              CANCEL\n            </Button>\n            <Button danger onClick={confirmDeleteHandler}>\n              DELETE\n            </Button>\n          </React.Fragment>\n        }\n      >\n        <p>\n          Do you want to proceed and delete this place? Please note that it\n          can't be undone thereafter.\n        </p>\n      </Modal>\n\n\n\n<li className=\"card-item\">\n<Card className=\"game-card\">\n          <div className=\"card-item__content\">\n          <p>{props.content}</p>\n          </div>\n          <div className=\"card-item__footer\">\n          <div className=\"card-item__footer_top\">@{props.creatorName}</div>\n              <div className=\"card-item__footer_bottom center\">\n              \n              <Button className=\"button--small\" to={`/cards/${props.id}`}>EDIT</Button>\n              <Button danger onClick={showDeleteWarningHandler}>X</Button>\n              <Button inverse> 0 <img src={flag} alt=\"flag\" width=\"10px\" /></Button>\n              \n              </div>\n          </div>        \n               \n            </Card>\n\n</li>\n\n        </React.Fragment>\n\n    )\n}\nexport default CardItem;\n","import React from 'react';\nimport CardItem from './CardItem';\nimport Card from '../../shared/components/UIElements/Card';\nimport Button from '../../shared/components/FormElements/Button';\n\n\n\nimport './CardList.css';\n\nconst CardList = props =>{  \n\n    \n     \n        const createCards = (data) =>{\n          const timestamp = data.createdAt.slice(0, 10);\n          return(\n            \n                <CardItem \n                    key={data.id}\n                    id={data.id}\n                    content={data.content}\n                    creatorId={data.creator}\n                    creatorName={data.creator.name || timestamp}\n                    onDelete={props.onDeleteCard}\n\n                />\n            )\n        }\n    \n        return (\n          <React.Fragment>\n{props.items.length === 0 && <div className=\"cards-list center\">\n            <Card>\n              <h2>No cards found. Maybe create one?</h2>\n              <Button to=\"/api/cards/new\">Create Card</Button>\n            </Card>\n          </div>}\n\n            <div className=\"card-list-container center\">\n      <ul className=\"cards-list \">\n      {props.items.map(createCards)}\n      </ul>\n        </div>\n\n\n          </React.Fragment>\n\n\n)\n    \n\n    \n    \n\n}\n\nexport default CardList;","import React,  { useState, useEffect} from \"react\";\n// import \"./Game.css\";\nimport CardList from \"../../cards/components/CardList\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\n\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\n\n\nconst Game = () => {\n    const [loadedCards, setLoadedCards] = useState();\n  constÂ {isLoading, error, sendRequest, clearError} = useHttpClient();\n\n\n  useEffect(() => {\n    const fetchCards = async () => {\n  \n      try {\n        const responseData = await sendRequest(process.env.REACT_APP_BACKEND_URL + \"/cards\");\n        setLoadedCards(responseData.cards);\n      } catch (err) {\n       \n      }\n    \n    };\n    fetchCards();\n  }, [sendRequest]);\n  console.log(loadedCards);\n\n\n  const cardDeletedHandler = deletedCardId => {\n    setLoadedCards(prevCards => prevCards.filter(card => card.id !== deletedCardId));\n  };\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n\n      {isLoading && (\n        <div className=\"center\">\n          <LoadingSpinner asOverlay/>\n        </div>\n      )}\n\n      {!isLoading && loadedCards && <CardList items={loadedCards}  onDeleteCard={cardDeletedHandler}/>}\n    </React.Fragment>\n  );\n\n\n   \n\n     \n      \n     \n    \n    \n}\nexport default Game;"],"sourceRoot":""}